// Code generated by hertz generator.

package user

import (
	"context"
	"strconv"

	client "simple-douyin/api/biz/client"
	mw "simple-douyin/api/biz/middleware"
	user "simple-douyin/api/biz/model/user"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/jwt"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRegisterRequest
	resp := new(user.UserRegisterResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode = 57001
		if resp.StatusMsg == nil {
			resp.StatusMsg = new(string)
		}
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	err = client.UserRegister(ctx, &req, resp)
	if err != nil {
		resp.StatusCode = 57001
		if resp.StatusMsg == nil {
			resp.StatusMsg = new(string)
		}
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	if resp.StatusCode != 0 {
		c.JSON(consts.StatusOK, resp)
		return
	}
	// 业务端注册流程通过，执行登录流程，下发token
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := new(user.UserLoginResponse)
		resp.StatusCode = 57001
		if resp.StatusMsg == nil {
			resp.StatusMsg = new(string)
		}
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	// 执行登录流程，下发token
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoRequest
	resp := new(user.UserInfoResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode = 57001
		if resp.StatusMsg == nil {
			resp.StatusMsg = new(string)
		}
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	// 该接口需要登录态，但不需要确认具体身份，仅在路由时鉴权即可
	// 通过中间件获取用户id
	loggedClaims, exist := c.Get("JWT_PAYLOAD")
	if !exist {
		resp.StatusCode = 57001
		if resp.StatusMsg == nil {
			resp.StatusMsg = new(string)
		}
		*resp.StatusMsg = "Unauthorized"
		c.JSON(consts.StatusOK, resp)
		return
	}
	userID := int64(loggedClaims.(jwt.MapClaims)[mw.JwtMiddleware.IdentityKey].(float64))
	req.Token = strconv.FormatInt(userID, 10)
	err = client.UserInfo(ctx, &req, resp)
	if err != nil {
		resp.StatusCode = 57001
		if resp.StatusMsg == nil {
			resp.StatusMsg = new(string)
		}
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	c.JSON(consts.StatusOK, resp)
}
