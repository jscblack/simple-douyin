// Code generated by Kitex v0.6.2. DO NOT EDIT.

package relationservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relation "simple-douyin/kitex_gen/relation"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAdd":          kitex.NewMethodInfo(relationAddHandler, newRelationServiceRelationAddArgs, newRelationServiceRelationAddResult, false),
		"RelationRemove":       kitex.NewMethodInfo(relationRemoveHandler, newRelationServiceRelationRemoveArgs, newRelationServiceRelationRemoveResult, false),
		"RelationFollowList":   kitex.NewMethodInfo(relationFollowListHandler, newRelationServiceRelationFollowListArgs, newRelationServiceRelationFollowListResult, false),
		"RelationFollowerList": kitex.NewMethodInfo(relationFollowerListHandler, newRelationServiceRelationFollowerListArgs, newRelationServiceRelationFollowerListResult, false),
		"RelationFriendList":   kitex.NewMethodInfo(relationFriendListHandler, newRelationServiceRelationFriendListArgs, newRelationServiceRelationFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func relationAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationAddArgs)
	realResult := result.(*relation.RelationServiceRelationAddResult)
	success, err := handler.(relation.RelationService).RelationAdd(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationAddArgs() interface{} {
	return relation.NewRelationServiceRelationAddArgs()
}

func newRelationServiceRelationAddResult() interface{} {
	return relation.NewRelationServiceRelationAddResult()
}

func relationRemoveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationRemoveArgs)
	realResult := result.(*relation.RelationServiceRelationRemoveResult)
	success, err := handler.(relation.RelationService).RelationRemove(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationRemoveArgs() interface{} {
	return relation.NewRelationServiceRelationRemoveArgs()
}

func newRelationServiceRelationRemoveResult() interface{} {
	return relation.NewRelationServiceRelationRemoveResult()
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationFollowListArgs)
	realResult := result.(*relation.RelationServiceRelationFollowListResult)
	success, err := handler.(relation.RelationService).RelationFollowList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFollowListArgs() interface{} {
	return relation.NewRelationServiceRelationFollowListArgs()
}

func newRelationServiceRelationFollowListResult() interface{} {
	return relation.NewRelationServiceRelationFollowListResult()
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationFollowerListArgs)
	realResult := result.(*relation.RelationServiceRelationFollowerListResult)
	success, err := handler.(relation.RelationService).RelationFollowerList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFollowerListArgs() interface{} {
	return relation.NewRelationServiceRelationFollowerListArgs()
}

func newRelationServiceRelationFollowerListResult() interface{} {
	return relation.NewRelationServiceRelationFollowerListResult()
}

func relationFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationFriendListArgs)
	realResult := result.(*relation.RelationServiceRelationFriendListResult)
	success, err := handler.(relation.RelationService).RelationFriendList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFriendListArgs() interface{} {
	return relation.NewRelationServiceRelationFriendListArgs()
}

func newRelationServiceRelationFriendListResult() interface{} {
	return relation.NewRelationServiceRelationFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAdd(ctx context.Context, request *relation.RelationAddRequest) (r *relation.RelationAddResponse, err error) {
	var _args relation.RelationServiceRelationAddArgs
	_args.Request = request
	var _result relation.RelationServiceRelationAddResult
	if err = p.c.Call(ctx, "RelationAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationRemove(ctx context.Context, request *relation.RelationRemoveRequest) (r *relation.RelationRemoveResponse, err error) {
	var _args relation.RelationServiceRelationRemoveArgs
	_args.Request = request
	var _result relation.RelationServiceRelationRemoveResult
	if err = p.c.Call(ctx, "RelationRemove", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, request *relation.RelationFollowListRequest) (r *relation.RelationFollowListResponse, err error) {
	var _args relation.RelationServiceRelationFollowListArgs
	_args.Request = request
	var _result relation.RelationServiceRelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, request *relation.RelationFollowerListRequest) (r *relation.RelationFollowerListResponse, err error) {
	var _args relation.RelationServiceRelationFollowerListArgs
	_args.Request = request
	var _result relation.RelationServiceRelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFriendList(ctx context.Context, request *relation.RelationFriendListRequest) (r *relation.RelationFriendListResponse, err error) {
	var _args relation.RelationServiceRelationFriendListArgs
	_args.Request = request
	var _result relation.RelationServiceRelationFriendListResult
	if err = p.c.Call(ctx, "RelationFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
