// Code generated by Kitex v0.6.2. DO NOT EDIT.

package messageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	message "simple-douyin/kitex_gen/message"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageChat":               kitex.NewMethodInfo(messageChatHandler, newMessageServiceMessageChatArgs, newMessageServiceMessageChatResult, false),
		"MessageSend":               kitex.NewMethodInfo(messageSendHandler, newMessageServiceMessageSendArgs, newMessageServiceMessageSendResult, false),
		"MessageGetUserLastMessage": kitex.NewMethodInfo(messageGetUserLastMessageHandler, newMessageServiceMessageGetUserLastMessageArgs, newMessageServiceMessageGetUserLastMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceMessageChatArgs)
	realResult := result.(*message.MessageServiceMessageChatResult)
	success, err := handler.(message.MessageService).MessageChat(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageChatArgs() interface{} {
	return message.NewMessageServiceMessageChatArgs()
}

func newMessageServiceMessageChatResult() interface{} {
	return message.NewMessageServiceMessageChatResult()
}

func messageSendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceMessageSendArgs)
	realResult := result.(*message.MessageServiceMessageSendResult)
	success, err := handler.(message.MessageService).MessageSend(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageSendArgs() interface{} {
	return message.NewMessageServiceMessageSendArgs()
}

func newMessageServiceMessageSendResult() interface{} {
	return message.NewMessageServiceMessageSendResult()
}

func messageGetUserLastMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceMessageGetUserLastMessageArgs)
	realResult := result.(*message.MessageServiceMessageGetUserLastMessageResult)
	success, err := handler.(message.MessageService).MessageGetUserLastMessage(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageGetUserLastMessageArgs() interface{} {
	return message.NewMessageServiceMessageGetUserLastMessageArgs()
}

func newMessageServiceMessageGetUserLastMessageResult() interface{} {
	return message.NewMessageServiceMessageGetUserLastMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageChat(ctx context.Context, request *message.MessageChatRequest) (r *message.MessageChatResponse, err error) {
	var _args message.MessageServiceMessageChatArgs
	_args.Request = request
	var _result message.MessageServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageSend(ctx context.Context, request *message.MessageSendRequest) (r *message.MessageSendResponse, err error) {
	var _args message.MessageServiceMessageSendArgs
	_args.Request = request
	var _result message.MessageServiceMessageSendResult
	if err = p.c.Call(ctx, "MessageSend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageGetUserLastMessage(ctx context.Context, request *message.MessageGetUserLastMessageRequest) (r *message.MessageGetUserLastMessageResponse, err error) {
	var _args message.MessageServiceMessageGetUserLastMessageArgs
	_args.Request = request
	var _result message.MessageServiceMessageGetUserLastMessageResult
	if err = p.c.Call(ctx, "MessageGetUserLastMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
